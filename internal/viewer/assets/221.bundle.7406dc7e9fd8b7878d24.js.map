{"version":3,"file":"221.bundle.7406dc7e9fd8b7878d24.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/colorPickerDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/SegmentationToolbox.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getPanelModule.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/hydrationUtils.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/commandsModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/init.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport { metaData, cache, triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nlet loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(instances, servicesManager, extensionManager) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    console.error('ReferencedSeriesSequence is missing for the SEG');\n    return;\n  }\n\n  const referencedSeries = referencedSeriesSequence[0] || referencedSeriesSequence;\n\n  displaySet.referencedImages = instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID = referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(segDisplaySet, servicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (!segDisplaySet.segments || Object.keys(segDisplaySet.segments).length === 0) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({ extensionManager, servicesManager, segDisplaySet, headers }) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(segDisplaySet, null, headers);\n\n  const cachedReferencedVolume = cache.getVolume(segDisplaySet.referencedVolumeId);\n\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE, {\n      percentComplete,\n    });\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = dicomlabToRGB(data.RecommendedDisplayCIELabValue);\n    }\n  });\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(segDisplaySet.displaySetInstanceUID);\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(instances, servicesManager, extensionManager);\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x => Math.round(x * 255));\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React from 'react';\nimport { Dialog } from '@ohif/ui';\nimport { ChromePicker } from 'react-color';\n\nimport './colorPickerDialog.css';\n\nfunction callColorPickerDialog(uiDialogService, rgbaColor, callback) {\n  const dialogId = 'pick-color';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.rgbaColor, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment Color',\n        value: { rgbaColor },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: 'primary' },\n          { id: 'save', text: 'Save', type: 'secondary' },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          const handleChange = color => {\n            setValue({ rgbaColor: color.rgb });\n          };\n\n          return (\n            <ChromePicker\n              color={value.rgbaColor}\n              onChange={handleChange}\n              presetColors={[]}\n              width={300}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callColorPickerDialog;\n","import { createReportAsync } from '@ohif/extension-default';\nimport React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { SegmentationGroupTable, LegacyButtonGroup, LegacyButton } from '@ohif/ui';\n\nimport callInputDialog from './callInputDialog';\nimport callColorPickerDialog from './colorPickerDialog';\nimport { useTranslation } from 'react-i18next';\n\nexport default function PanelSegmentation({\n  servicesManager,\n  commandsManager,\n  extensionManager,\n  configuration,\n}) {\n  const { segmentationService, viewportGridService, uiDialogService } = servicesManager.services;\n\n  const { t } = useTranslation('PanelSegmentation');\n\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const [segmentations, setSegmentations] = useState(() => segmentationService.getSegmentations());\n\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  const getToolGroupIds = segmentationId => {\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(segmentationId);\n\n    return toolGroupIds;\n  };\n\n  const onSegmentationAdd = async () => {\n    commandsManager.runCommand('createEmptySegmentationForViewport');\n  };\n\n  const onSegmentationClick = (segmentationId: string) => {\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    segmentationService.remove(segmentationId);\n  };\n\n  const onSegmentAdd = segmentationId => {\n    segmentationService.addSegment(segmentationId);\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    segmentationService.setActiveSegment(segmentationId, segmentIndex);\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      // const toolGroupId =\n      segmentationService.setActiveSegmentationForToolGroup(segmentationId, toolGroupId);\n      segmentationService.jumpToSegmentCenter(segmentationId, segmentIndex, toolGroupId);\n    });\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabel(segmentationId, segmentIndex, label);\n    });\n  };\n\n  const onSegmentationEdit = segmentationId => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { color, opacity } = segment;\n\n    const rgbaColor = {\n      r: color[0],\n      g: color[1],\n      b: color[2],\n      a: opacity / 255.0,\n    };\n\n    callColorPickerDialog(uiDialogService, rgbaColor, (newRgbaColor, actionId) => {\n      if (actionId === 'cancel') {\n        return;\n      }\n\n      segmentationService.setSegmentRGBAColor(segmentationId, segmentIndex, [\n        newRgbaColor.r,\n        newRgbaColor.g,\n        newRgbaColor.b,\n        newRgbaColor.a * 255.0,\n      ]);\n    });\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    segmentationService.removeSegment(segmentationId, segmentIndex);\n  };\n\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    // Todo: right now we apply the visibility to all tool groups\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    });\n  };\n\n  const onToggleSegmentLock = (segmentationId, segmentIndex) => {\n    segmentationService.toggleSegmentLocked(segmentationId, segmentIndex);\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (segmentationId, key, value) => {\n      segmentationService.setConfiguration({\n        segmentationId,\n        [key]: value,\n      });\n    },\n    [segmentationService]\n  );\n\n  const onSegmentationDownload = segmentationId => {\n    commandsManager.runCommand('downloadSegmentation', {\n      segmentationId,\n    });\n  };\n\n  const storeSegmentation = async segmentationId => {\n    const datasources = extensionManager.getActiveDataSource();\n\n    const displaySetInstanceUIDs = await createReportAsync({\n      servicesManager,\n      getReport: () =>\n        commandsManager.runCommand('storeSegmentation', {\n          segmentationId,\n          dataSource: datasources[0],\n        }),\n      reportType: 'Segmentation',\n    });\n\n    // Show the exported report in the active viewport as read only (similar to SR)\n    if (displaySetInstanceUIDs) {\n      // clear the segmentation that we exported, similar to the storeMeasurement\n      // where we remove the measurements and prompt again the user if they would like\n      // to re-read the measurements in a SR read only viewport\n      segmentationService.remove(segmentationId);\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: viewportGridService.getActiveViewportId(),\n        displaySetInstanceUIDs,\n      });\n    }\n  };\n\n  const onSegmentationDownloadRTSS = segmentationId => {\n    commandsManager.runCommand('downloadRTSS', {\n      segmentationId,\n    });\n  };\n\n  return (\n    <>\n      <div className=\"ohif-scrollbar flex min-h-0 flex-auto select-none flex-col justify-between overflow-auto\">\n        <SegmentationGroupTable\n          title={t('Segmentations')}\n          segmentations={segmentations}\n          disableEditing={configuration.disableEditing}\n          activeSegmentationId={selectedSegmentationId || ''}\n          onSegmentationAdd={onSegmentationAdd}\n          onSegmentationClick={onSegmentationClick}\n          onSegmentationDelete={onSegmentationDelete}\n          onSegmentationDownload={onSegmentationDownload}\n          onSegmentationDownloadRTSS={onSegmentationDownloadRTSS}\n          storeSegmentation={storeSegmentation}\n          onSegmentationEdit={onSegmentationEdit}\n          onSegmentClick={onSegmentClick}\n          onSegmentEdit={onSegmentEdit}\n          onSegmentAdd={onSegmentAdd}\n          onSegmentColorClick={onSegmentColorClick}\n          onSegmentDelete={onSegmentDelete}\n          onToggleSegmentVisibility={onToggleSegmentVisibility}\n          onToggleSegmentLock={onToggleSegmentLock}\n          onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n          showDeleteSegment={true}\n          segmentationConfig={{ initialConfig: segmentationConfiguration }}\n          setRenderOutline={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'renderOutline', value)\n          }\n          setOutlineOpacityActive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'outlineOpacity', value)\n          }\n          setRenderFill={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'renderFill', value)\n          }\n          setRenderInactiveSegmentations={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'renderInactiveSegmentations',\n              value\n            )\n          }\n          setOutlineWidthActive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'outlineWidthActive', value)\n          }\n          setFillAlpha={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'fillAlpha', value)\n          }\n          setFillAlphaInactive={value =>\n            _setSegmentationConfiguration(selectedSegmentationId, 'fillAlphaInactive', value)\n          }\n        />\n      </div>\n    </>\n  );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import React, { useCallback, useEffect, useState, useReducer } from 'react';\nimport { AdvancedToolbox, InputDoubleRange, useViewportGrid } from '@ohif/ui';\nimport { Types } from '@ohif/extension-cornerstone';\nimport { utilities } from '@cornerstonejs/tools';\n\nconst { segmentation: segmentationUtils } = utilities;\n\nconst TOOL_TYPES = {\n  CIRCULAR_BRUSH: 'CircularBrush',\n  SPHERE_BRUSH: 'SphereBrush',\n  CIRCULAR_ERASER: 'CircularEraser',\n  SPHERE_ERASER: 'SphereEraser',\n  CIRCLE_SHAPE: 'CircleScissor',\n  RECTANGLE_SHAPE: 'RectangleScissor',\n  SPHERE_SHAPE: 'SphereScissor',\n  THRESHOLD_CIRCULAR_BRUSH: 'ThresholdCircularBrush',\n  THRESHOLD_SPHERE_BRUSH: 'ThresholdSphereBrush',\n};\n\nconst ACTIONS = {\n  SET_TOOL_CONFIG: 'SET_TOOL_CONFIG',\n  SET_ACTIVE_TOOL: 'SET_ACTIVE_TOOL',\n};\n\nconst initialState = {\n  Brush: {\n    brushSize: 15,\n    mode: 'CircularBrush', // Can be 'CircularBrush' or 'SphereBrush'\n  },\n  Eraser: {\n    brushSize: 15,\n    mode: 'CircularEraser', // Can be 'CircularEraser' or 'SphereEraser'\n  },\n  Shapes: {\n    brushSize: 15,\n    mode: 'CircleScissor', // E.g., 'CircleScissor', 'RectangleScissor', or 'SphereScissor'\n  },\n  ThresholdBrush: {\n    brushSize: 15,\n    thresholdRange: [-500, 500],\n  },\n  activeTool: null,\n};\n\nfunction toolboxReducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.SET_TOOL_CONFIG:\n      const { tool, config } = action.payload;\n      return {\n        ...state,\n        [tool]: {\n          ...state[tool],\n          ...config,\n        },\n      };\n    case ACTIONS.SET_ACTIVE_TOOL:\n      return { ...state, activeTool: action.payload };\n    default:\n      return state;\n  }\n}\n\nfunction SegmentationToolbox({ servicesManager, extensionManager }) {\n  const { toolbarService, segmentationService, toolGroupService } =\n    servicesManager.services as Types.CornerstoneServices;\n\n  const [viewportGrid] = useViewportGrid();\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const [toolsEnabled, setToolsEnabled] = useState(false);\n  const [state, dispatch] = useReducer(toolboxReducer, initialState);\n\n  const updateActiveTool = useCallback(() => {\n    if (!viewports?.size || activeViewportId === undefined) {\n      return;\n    }\n    const viewport = viewports.get(activeViewportId);\n\n    if (!viewport) {\n      return;\n    }\n\n    dispatch({\n      type: ACTIONS.SET_ACTIVE_TOOL,\n      payload: toolGroupService.getActiveToolForViewport(viewport.viewportId),\n    });\n  }, [activeViewportId, viewports, toolGroupService, dispatch]);\n\n  const setToolActive = useCallback(\n    toolName => {\n      toolbarService.recordInteraction({\n        interactionType: 'tool',\n        commands: [\n          {\n            commandName: 'setToolActive',\n            commandOptions: {\n              toolName,\n            },\n          },\n        ],\n      });\n\n      dispatch({ type: ACTIONS.SET_ACTIVE_TOOL, payload: toolName });\n    },\n    [toolbarService, dispatch]\n  );\n\n  /**\n   * sets the tools enabled IF there are segmentations\n   */\n  useEffect(() => {\n    const events = [\n      segmentationService.EVENTS.SEGMENTATION_ADDED,\n      segmentationService.EVENTS.SEGMENTATION_UPDATED,\n      segmentationService.EVENTS.SEGMENTATION_REMOVED,\n    ];\n\n    const unsubscriptions = [];\n\n    events.forEach(event => {\n      const { unsubscribe } = segmentationService.subscribe(event, () => {\n        const segmentations = segmentationService.getSegmentations();\n\n        const activeSegmentation = segmentations?.find(seg => seg.isActive);\n\n        setToolsEnabled(activeSegmentation?.segmentCount > 0);\n      });\n\n      unsubscriptions.push(unsubscribe);\n    });\n\n    updateActiveTool();\n\n    return () => {\n      unsubscriptions.forEach(unsubscribe => unsubscribe());\n    };\n  }, [activeViewportId, viewports, segmentationService, updateActiveTool]);\n\n  /**\n   * Update the active tool when the toolbar state changes\n   */\n  useEffect(() => {\n    const { unsubscribe } = toolbarService.subscribe(\n      toolbarService.EVENTS.TOOL_BAR_STATE_MODIFIED,\n      () => {\n        updateActiveTool();\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [toolbarService, updateActiveTool]);\n\n  useEffect(() => {\n    // if the active tool is not a brush tool then do nothing\n    if (!Object.values(TOOL_TYPES).includes(state.activeTool)) {\n      return;\n    }\n\n    // if the tool is Segmentation and it is enabled then do nothing\n    if (toolsEnabled) {\n      return;\n    }\n\n    // if the tool is Segmentation and it is disabled, then switch\n    // back to the window level tool to not confuse the user when no\n    // segmentation is active or when there is no segment in the segmentation\n    setToolActive('WindowLevel');\n  }, [toolsEnabled, state.activeTool, setToolActive]);\n\n  const updateBrushSize = useCallback(\n    (toolName, brushSize) => {\n      toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n        segmentationUtils.setBrushSizeForToolGroup(toolGroupId, brushSize, toolName);\n      });\n    },\n    [toolGroupService]\n  );\n\n  const onBrushSizeChange = useCallback(\n    (valueAsStringOrNumber, toolCategory) => {\n      const value = Number(valueAsStringOrNumber);\n\n      _getToolNamesFromCategory(toolCategory).forEach(toolName => {\n        updateBrushSize(toolName, value);\n      });\n\n      dispatch({\n        type: ACTIONS.SET_TOOL_CONFIG,\n        payload: {\n          tool: toolCategory,\n          config: { brushSize: value },\n        },\n      });\n    },\n    [toolGroupService, dispatch]\n  );\n\n  const handleRangeChange = useCallback(\n    newRange => {\n      if (\n        newRange[0] === state.ThresholdBrush.thresholdRange[0] &&\n        newRange[1] === state.ThresholdBrush.thresholdRange[1]\n      ) {\n        return;\n      }\n\n      const toolNames = _getToolNamesFromCategory('ThresholdBrush');\n\n      toolNames.forEach(toolName => {\n        toolGroupService.getToolGroupIds()?.forEach(toolGroupId => {\n          const toolGroup = toolGroupService.getToolGroup(toolGroupId);\n          toolGroup.setToolConfiguration(toolName, {\n            strategySpecificConfiguration: {\n              THRESHOLD_INSIDE_CIRCLE: {\n                threshold: newRange,\n              },\n            },\n          });\n        });\n      });\n\n      dispatch({\n        type: ACTIONS.SET_TOOL_CONFIG,\n        payload: {\n          tool: 'ThresholdBrush',\n          config: { thresholdRange: newRange },\n        },\n      });\n    },\n    [toolGroupService, dispatch, state.ThresholdBrush.thresholdRange]\n  );\n\n  return (\n    <AdvancedToolbox\n      title=\"Segmentation Tools\"\n      items={[\n        {\n          name: 'Brush',\n          icon: 'icon-tool-brush',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.CIRCULAR_BRUSH ||\n            state.activeTool === TOOL_TYPES.SPHERE_BRUSH,\n          onClick: () => setToolActive(TOOL_TYPES.CIRCULAR_BRUSH),\n          options: [\n            {\n              name: 'Radius (mm)',\n              id: 'brush-radius',\n              type: 'range',\n              min: 0.5,\n              max: 99.5,\n              value: state.Brush.brushSize,\n              step: 0.5,\n              onChange: value => onBrushSizeChange(value, 'Brush'),\n            },\n            {\n              name: 'Mode',\n              type: 'radio',\n              id: 'brush-mode',\n              value: state.Brush.mode,\n              values: [\n                { value: TOOL_TYPES.CIRCULAR_BRUSH, label: 'Circle' },\n                { value: TOOL_TYPES.SPHERE_BRUSH, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n          ],\n        },\n        {\n          name: 'Eraser',\n          icon: 'icon-tool-eraser',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.CIRCULAR_ERASER ||\n            state.activeTool === TOOL_TYPES.SPHERE_ERASER,\n          onClick: () => setToolActive(TOOL_TYPES.CIRCULAR_ERASER),\n          options: [\n            {\n              name: 'Radius (mm)',\n              type: 'range',\n              id: 'eraser-radius',\n              min: 0.5,\n              max: 99.5,\n              value: state.Eraser.brushSize,\n              step: 0.5,\n              onChange: value => onBrushSizeChange(value, 'Eraser'),\n            },\n            {\n              name: 'Mode',\n              type: 'radio',\n              id: 'eraser-mode',\n              value: state.Eraser.mode,\n              values: [\n                { value: TOOL_TYPES.CIRCULAR_ERASER, label: 'Circle' },\n                { value: TOOL_TYPES.SPHERE_ERASER, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n          ],\n        },\n        {\n          name: 'Shapes',\n          icon: 'icon-tool-shape',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.CIRCLE_SHAPE ||\n            state.activeTool === TOOL_TYPES.RECTANGLE_SHAPE ||\n            state.activeTool === TOOL_TYPES.SPHERE_SHAPE,\n          onClick: () => setToolActive(TOOL_TYPES.CIRCLE_SHAPE),\n          options: [\n            {\n              name: 'Mode',\n              type: 'radio',\n              value: state.Shapes.mode,\n              id: 'shape-mode',\n              values: [\n                { value: TOOL_TYPES.CIRCLE_SHAPE, label: 'Circle' },\n                { value: TOOL_TYPES.RECTANGLE_SHAPE, label: 'Rectangle' },\n                { value: TOOL_TYPES.SPHERE_SHAPE, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n          ],\n        },\n        {\n          name: 'Threshold Tool',\n          icon: 'icon-tool-threshold',\n          disabled: !toolsEnabled,\n          active:\n            state.activeTool === TOOL_TYPES.THRESHOLD_CIRCULAR_BRUSH ||\n            state.activeTool === TOOL_TYPES.THRESHOLD_SPHERE_BRUSH,\n          onClick: () => setToolActive(TOOL_TYPES.THRESHOLD_CIRCULAR_BRUSH),\n          options: [\n            {\n              name: 'Radius (mm)',\n              id: 'threshold-radius',\n              type: 'range',\n              min: 0.5,\n              max: 99.5,\n              value: state.ThresholdBrush.brushSize,\n              step: 0.5,\n              onChange: value => onBrushSizeChange(value, 'ThresholdBrush'),\n            },\n            {\n              name: 'Mode',\n              type: 'radio',\n              id: 'threshold-mode',\n              value: state.activeTool,\n              values: [\n                { value: TOOL_TYPES.THRESHOLD_CIRCULAR_BRUSH, label: 'Circle' },\n                { value: TOOL_TYPES.THRESHOLD_SPHERE_BRUSH, label: 'Sphere' },\n              ],\n              onChange: value => setToolActive(value),\n            },\n            {\n              type: 'custom',\n              id: 'segmentation-threshold-range',\n              children: () => {\n                return (\n                  <div>\n                    <div className=\"bg-secondary-light h-[1px]\"></div>\n                    <div className=\"mt-1 text-[13px] text-white\">Threshold</div>\n                    <InputDoubleRange\n                      values={state.ThresholdBrush.thresholdRange}\n                      onChange={handleRangeChange}\n                      minValue={-1000}\n                      maxValue={1000}\n                      step={1}\n                      showLabel={true}\n                      allowNumberEdit={true}\n                      showAdjustmentArrows={false}\n                    />\n                  </div>\n                );\n              },\n            },\n          ],\n        },\n      ]}\n    />\n  );\n}\n\nfunction _getToolNamesFromCategory(category) {\n  let toolNames = [];\n  switch (category) {\n    case 'Brush':\n      toolNames = ['CircularBrush', 'SphereBrush'];\n      break;\n    case 'Eraser':\n      toolNames = ['CircularEraser', 'SphereEraser'];\n      break;\n    case 'ThresholdBrush':\n      toolNames = ['ThresholdCircularBrush', 'ThresholdSphereBrush'];\n      break;\n    default:\n      break;\n  }\n\n  return toolNames;\n}\n\nexport default SegmentationToolbox;\n","import React from 'react';\n\nimport { useAppConfig } from '@state';\nimport PanelSegmentation from './panels/PanelSegmentation';\nimport SegmentationToolbox from './panels/SegmentationToolbox';\n\nconst getPanelModule = ({ commandsManager, servicesManager, extensionManager, configuration }) => {\n  const { customizationService } = servicesManager.services;\n\n  const wrappedPanelSegmentation = configuration => {\n    const [appConfig] = useAppConfig();\n\n    const disableEditingForMode = customizationService.get('segmentation.disableEditing');\n\n    return (\n      <PanelSegmentation\n        commandsManager={commandsManager}\n        servicesManager={servicesManager}\n        extensionManager={extensionManager}\n        configuration={{\n          ...configuration,\n          disableEditing: appConfig.disableEditing || disableEditingForMode?.value,\n        }}\n      />\n    );\n  };\n\n  const wrappedPanelSegmentationWithTools = configuration => {\n    const [appConfig] = useAppConfig();\n    return (\n      <>\n        <SegmentationToolbox\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n          }}\n        />\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          configuration={{\n            ...configuration,\n          }}\n        />\n      </>\n    );\n  };\n\n  return [\n    {\n      name: 'panelSegmentation',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentation,\n    },\n    {\n      name: 'panelSegmentationWithTools',\n      iconName: 'tab-segmentation',\n      iconLabel: 'Segmentation',\n      label: 'Segmentation',\n      component: wrappedPanelSegmentationWithTools,\n    },\n  ];\n};\n\nexport default getPanelModule;\n","import { Enums, cache } from '@cornerstonejs/core';\n\n/**\n * Updates the viewports in preparation for rendering segmentations.\n * Evaluates each viewport to determine which need modifications,\n * then for those viewports, changes them to a volume type and ensures\n * they are ready for segmentation rendering.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - ID of the viewport to be updated.\n * @param params.loadFn - Function to load the segmentation data.\n * @param params.servicesManager - The services manager.\n * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n *\n * @returns Returns true upon successful update of viewports for segmentation rendering.\n */\nasync function updateViewportsForSegmentationRendering({\n  viewportId,\n  loadFn,\n  servicesManager,\n  referencedDisplaySetInstanceUID,\n}: {\n  viewportId: string;\n  loadFn: () => Promise<string>;\n  servicesManager: any;\n  referencedDisplaySetInstanceUID?: string;\n}) {\n  const { cornerstoneViewportService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  referencedDisplaySetInstanceUID =\n    referencedDisplaySetInstanceUID || viewport?.displaySetInstanceUIDs[0];\n\n  const updatedViewports = getUpdatedViewportsForSegmentation({\n    servicesManager,\n    viewportId,\n    referencedDisplaySetInstanceUID,\n  });\n\n  // create Segmentation callback which needs to be waited until\n  // the volume is created (if coming from stack)\n  const createSegmentationForVolume = async () => {\n    const segmentationId = await loadFn();\n    segmentationService.hydrateSegmentation(segmentationId);\n  };\n\n  // the reference volume that is used to draw the segmentation. so check if the\n  // volume exists in the cache (the target Viewport is already a volume viewport)\n  const volumeExists = Array.from(cache._volumeCache.keys()).some(volumeId =>\n    volumeId.includes(referencedDisplaySetInstanceUID)\n  );\n\n  updatedViewports.forEach(async viewport => {\n    viewport.viewportOptions = {\n      ...viewport.viewportOptions,\n      viewportType: 'volume',\n      needsRerendering: true,\n    };\n    const viewportId = viewport.viewportId;\n\n    const csViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n    const prevCamera = csViewport.getCamera();\n\n    // only run the createSegmentationForVolume for the targetViewportId\n    // since the rest will get handled by cornerstoneViewportService\n    if (volumeExists && viewportId === targetViewportId) {\n      await createSegmentationForVolume();\n      return;\n    }\n\n    const createNewSegmentationWhenVolumeMounts = async evt => {\n      const isTheActiveViewportVolumeMounted = evt.detail.volumeActors?.find(ac =>\n        ac.uid.includes(referencedDisplaySetInstanceUID)\n      );\n\n      // Note: make sure to re-grab the viewport since it might have changed\n      // during the time it took for the volume to be mounted, for instance\n      // the stack viewport has been changed to a volume viewport\n      const volumeViewport = cornerstoneViewportService.getCornerstoneViewport(viewportId);\n      volumeViewport.setCamera(prevCamera);\n\n      volumeViewport.element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        createNewSegmentationWhenVolumeMounts\n      );\n\n      if (!isTheActiveViewportVolumeMounted) {\n        // it means it is one of those other updated viewports so just update the camera\n        return;\n      }\n\n      if (viewportId === targetViewportId) {\n        await createSegmentationForVolume();\n      }\n    };\n\n    csViewport.element.addEventListener(\n      Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n      createNewSegmentationWhenVolumeMounts\n    );\n  });\n\n  // Set the displaySets for the viewports that require to be updated\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nconst getTargetViewport = ({ viewportId, viewportGridService }) => {\n  const { viewports, activeViewportId } = viewportGridService.getState();\n  const targetViewportId = viewportId || activeViewportId;\n\n  const viewport = viewports.get(targetViewportId);\n\n  return viewport;\n};\n\n/**\n * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n * This function evaluates viewports based on their compatibility with the provided segmentation's\n * frame of reference UID and appends them to the updated list if they should render the segmentation.\n *\n * @param {Object} params - Parameters for the function.\n * @param params.viewportId - the ID of the viewport to be updated.\n * @param params.servicesManager - The services manager\n * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n *\n * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n */\nfunction getUpdatedViewportsForSegmentation({\n  viewportId,\n  servicesManager,\n  referencedDisplaySetInstanceUID,\n}) {\n  const { hangingProtocolService, displaySetService, segmentationService, viewportGridService } =\n    servicesManager.services;\n\n  const { viewports } = viewportGridService.getState();\n\n  const viewport = getTargetViewport({ viewportId, viewportGridService });\n  const targetViewportId = viewport.viewportOptions.viewportId;\n\n  const displaySetInstanceUIDs = viewports.get(targetViewportId).displaySetInstanceUIDs;\n\n  const referenceDisplaySetInstanceUID =\n    referencedDisplaySetInstanceUID || displaySetInstanceUIDs[0];\n\n  const referencedDisplaySet = displaySetService.getDisplaySetByUID(referenceDisplaySetInstanceUID);\n  const segmentationFrameOfReferenceUID = referencedDisplaySet.instances[0].FrameOfReferenceUID;\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    targetViewportId,\n    referenceDisplaySetInstanceUID\n  );\n\n  viewports.forEach((viewport, viewportId) => {\n    if (\n      targetViewportId === viewportId ||\n      updatedViewports.find(v => v.viewportId === viewportId)\n    ) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segmentationFrameOfReferenceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportId,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          viewportType: 'volume',\n          needsRerendering: true,\n        },\n      });\n    }\n  });\n  return updatedViewports;\n}\n\nexport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n};\n","import dcmjs from 'dcmjs';\nimport { createReportDialogPrompt } from '@ohif/extension-default';\nimport { ServicesManager, Types } from '@ohif/core';\nimport { cache, metaData } from '@cornerstonejs/core';\nimport {\n  segmentation as cornerstoneToolsSegmentation,\n  Enums as cornerstoneToolsEnums,\n} from '@cornerstonejs/tools';\nimport { adaptersRT, helpers, adaptersSEG } from '@cornerstonejs/adapters';\nimport { classes, DicomMetadataStore } from '@ohif/core';\n\nimport vtkImageMarchingSquares from '@kitware/vtk.js/Filters/General/ImageMarchingSquares';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkImageData from '@kitware/vtk.js/Common/DataModel/ImageData';\n\nimport {\n  updateViewportsForSegmentationRendering,\n  getUpdatedViewportsForSegmentation,\n  getTargetViewport,\n} from './utils/hydrationUtils';\n\nconst { datasetToBlob } = dcmjs.data;\n\nconst {\n  Cornerstone3D: {\n    Segmentation: { generateLabelMaps2DFrom3D, generateSegmentation },\n  },\n} = adaptersSEG;\n\nconst {\n  Cornerstone3D: {\n    RTSS: { generateRTSSFromSegmentations },\n  },\n} = adaptersRT;\n\nconst { downloadDICOMData } = helpers;\n\nconst commandsModule = ({\n  servicesManager,\n  extensionManager,\n}: Types.Extensions.ExtensionParams): Types.Extensions.CommandsModule => {\n  const {\n    uiNotificationService,\n    segmentationService,\n    uiDialogService,\n    displaySetService,\n    viewportGridService,\n  } = (servicesManager as ServicesManager).services;\n\n  const actions = {\n    /**\n     * Retrieves a list of viewports that require updates in preparation for segmentation rendering.\n     * This function evaluates viewports based on their compatibility with the provided segmentation's\n     * frame of reference UID and appends them to the updated list if they should render the segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the ID of the viewport to be updated.\n     * @param params.servicesManager - The services manager\n     * @param params.referencedDisplaySetInstanceUID - Optional UID for the referenced display set instance.\n     *\n     * @returns {Array} Returns an array of viewports that require updates for segmentation rendering.\n     */\n    getUpdatedViewportsForSegmentation,\n    /**\n     * Creates an empty segmentation for a specified viewport.\n     * It first checks if the display set associated with the viewport is reconstructable.\n     * If not, it raises a notification error. Otherwise, it creates a new segmentation\n     * for the display set after handling the necessary steps for making the viewport\n     * a volume viewport first\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    createEmptySegmentationForViewport: async ({ viewportId }) => {\n      const viewport = getTargetViewport({ viewportId, viewportGridService });\n      // Todo: add support for multiple display sets\n      const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n      const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n      if (!displaySet.isReconstructable) {\n        uiNotificationService.show({\n          title: 'Segmentation',\n          message: 'Segmentation is not supported for non-reconstructible displaysets yet',\n          type: 'error',\n        });\n        return;\n      }\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          const currentSegmentations = segmentationService.getSegmentations();\n          const segmentationId = await segmentationService.createSegmentationForDisplaySet(\n            displaySetInstanceUID,\n            { label: `Segmentation ${currentSegmentations.length + 1}` }\n          );\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          // Add only one segment for now\n          segmentationService.addSegment(segmentationId, {\n            toolGroupId,\n            segmentIndex: 1,\n            properties: {\n              label: 'Segment 1',\n            },\n          });\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentations for a specified viewport.\n     * The function prepares the viewport for rendering, then loads the segmentation details.\n     * Additionally, if the segmentation has scalar data, it is set for the corresponding label map volume.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentations - Array of segmentations to be loaded.\n     * @param params.viewportId - the target viewport ID.\n     *\n     */\n    loadSegmentationsForViewport: async ({ segmentations, viewportId }) => {\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        loadFn: async () => {\n          // Todo: handle adding more than one segmentation\n          const viewport = getTargetViewport({ viewportId, viewportGridService });\n          const displaySetInstanceUID = viewport.displaySetInstanceUIDs[0];\n\n          const segmentation = segmentations[0];\n          const segmentationId = segmentation.id;\n          const label = segmentation.label;\n          const segments = segmentation.segments;\n\n          delete segmentation.segments;\n\n          await segmentationService.createSegmentationForDisplaySet(displaySetInstanceUID, {\n            segmentationId,\n            label,\n          });\n\n          if (segmentation.scalarData) {\n            const labelmapVolume = segmentationService.getLabelmapVolume(segmentationId);\n            labelmapVolume.scalarData.set(segmentation.scalarData);\n          }\n\n          segmentationService.addOrUpdateSegmentation(segmentation);\n\n          const toolGroupId = viewport.viewportOptions.toolGroupId;\n          await segmentationService.addSegmentationRepresentationToToolGroup(\n            toolGroupId,\n            segmentationId\n          );\n\n          segments.forEach(segment => {\n            if (segment === null) {\n              return;\n            }\n            segmentationService.addSegment(segmentationId, {\n              segmentIndex: segment.segmentIndex,\n              toolGroupId,\n              properties: {\n                color: segment.color,\n                label: segment.label,\n                opacity: segment.opacity,\n                isLocked: segment.isLocked,\n                visibility: segment.isVisible,\n                active: segmentation.activeSegmentIndex === segment.segmentIndex,\n              },\n            });\n          });\n\n          if (segmentation.centroidsIJK) {\n            segmentationService.setCentroids(segmentation.id, segmentation.centroidsIJK);\n          }\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Loads segmentation display sets for a specified viewport.\n     * Depending on the modality of the display set (SEG or RTSTRUCT),\n     * it chooses the appropriate service function to create\n     * the segmentation for the display set.\n     * The function then prepares the viewport for rendering segmentation.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.viewportId - ID of the viewport where the segmentation display sets should be loaded.\n     * @param params.displaySets - Array of display sets to be loaded for segmentation.\n     *\n     */\n    loadSegmentationDisplaySetsForViewport: async ({ viewportId, displaySets }) => {\n      // Todo: handle adding more than one segmentation\n      const displaySet = displaySets[0];\n\n      updateViewportsForSegmentationRendering({\n        viewportId,\n        servicesManager,\n        referencedDisplaySetInstanceUID: displaySet.referencedDisplaySetInstanceUID,\n        loadFn: async () => {\n          const segDisplaySet = displaySet;\n          const suppressEvents = false;\n          const serviceFunction =\n            segDisplaySet.Modality === 'SEG'\n              ? 'createSegmentationForSEGDisplaySet'\n              : 'createSegmentationForRTDisplaySet';\n\n          const boundFn = segmentationService[serviceFunction].bind(segmentationService);\n          const segmentationId = await boundFn(segDisplaySet, null, suppressEvents);\n\n          return segmentationId;\n        },\n      });\n    },\n    /**\n     * Generates a segmentation from a given segmentation ID.\n     * This function retrieves the associated segmentation and\n     * its referenced volume, extracts label maps from the\n     * segmentation volume, and produces segmentation data\n     * alongside associated metadata.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be generated.\n     * @param params.options - Optional configuration for the generation process.\n     *\n     * @returns Returns the generated segmentation data.\n     */\n    generateSegmentation: ({ segmentationId, options = {} }) => {\n      const segmentation = cornerstoneToolsSegmentation.state.getSegmentation(segmentationId);\n\n      const { referencedVolumeId } = segmentation.representationData.LABELMAP;\n\n      const segmentationVolume = cache.getVolume(segmentationId);\n      const referencedVolume = cache.getVolume(referencedVolumeId);\n      const referencedImages = referencedVolume.getCornerstoneImages();\n\n      const labelmapObj = generateLabelMaps2DFrom3D(segmentationVolume);\n\n      // Generate fake metadata as an example\n      labelmapObj.metadata = [];\n\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      labelmapObj.segmentsOnLabelmap.forEach(segmentIndex => {\n        // segmentation service already has a color for each segment\n        const segment = segmentationInOHIF?.segments[segmentIndex];\n        const { label, color } = segment;\n\n        const RecommendedDisplayCIELabValue = dcmjs.data.Colors.rgb2DICOMLAB(\n          color.slice(0, 3).map(value => value / 255)\n        ).map(value => Math.round(value));\n\n        const segmentMetadata = {\n          SegmentNumber: segmentIndex.toString(),\n          SegmentLabel: label,\n          SegmentAlgorithmType: 'MANUAL',\n          SegmentAlgorithmName: 'OHIF Brush',\n          RecommendedDisplayCIELabValue,\n          SegmentedPropertyCategoryCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n          SegmentedPropertyTypeCodeSequence: {\n            CodeValue: 'T-D0050',\n            CodingSchemeDesignator: 'SRT',\n            CodeMeaning: 'Tissue',\n          },\n        };\n        labelmapObj.metadata[segmentIndex] = segmentMetadata;\n      });\n\n      const generatedSegmentation = generateSegmentation(\n        referencedImages,\n        labelmapObj,\n        metaData,\n        options\n      );\n\n      return generatedSegmentation;\n    },\n    /**\n     * Downloads a segmentation based on the provided segmentation ID.\n     * This function retrieves the associated segmentation and\n     * uses it to generate the corresponding DICOM dataset, which\n     * is then downloaded with an appropriate filename.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be downloaded.\n     *\n     */\n    downloadSegmentation: ({ segmentationId }) => {\n      const segmentationInOHIF = segmentationService.getSegmentation(segmentationId);\n      const generatedSegmentation = actions.generateSegmentation({\n        segmentationId,\n      });\n\n      downloadDICOMData(generatedSegmentation.dataset, `${segmentationInOHIF.label}`);\n    },\n    /**\n     * Stores a segmentation based on the provided segmentationId into a specified data source.\n     * The SeriesDescription is derived from user input or defaults to the segmentation label,\n     * and in its absence, defaults to 'Research Derived Series'.\n     *\n     * @param {Object} params - Parameters for the function.\n     * @param params.segmentationId - ID of the segmentation to be stored.\n     * @param params.dataSource - Data source where the generated segmentation will be stored.\n     *\n     * @returns {Object|void} Returns the naturalized report if successfully stored,\n     * otherwise throws an error.\n     */\n    storeSegmentation: async ({ segmentationId, dataSource }) => {\n      const promptResult = await createReportDialogPrompt(uiDialogService, {\n        extensionManager,\n      });\n\n      if (promptResult.action !== 1 && promptResult.value) {\n        return;\n      }\n\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      if (!segmentation) {\n        throw new Error('No segmentation found');\n      }\n\n      const { label } = segmentation;\n      const SeriesDescription = promptResult.value || label || 'Research Derived Series';\n\n      const generatedData = actions.generateSegmentation({\n        segmentationId,\n        options: {\n          SeriesDescription,\n        },\n      });\n\n      if (!generatedData || !generatedData.dataset) {\n        throw new Error('Error during segmentation generation');\n      }\n\n      const { dataset: naturalizedReport } = generatedData;\n\n      await dataSource.store.dicom(naturalizedReport);\n\n      // The \"Mode\" route listens for DicomMetadataStore changes\n      // When a new instance is added, it listens and\n      // automatically calls makeDisplaySets\n\n      // add the information for where we stored it to the instance as well\n      naturalizedReport.wadoRoot = dataSource.getConfig().wadoRoot;\n\n      DicomMetadataStore.addInstances([naturalizedReport], true);\n\n      return naturalizedReport;\n    },\n    /**\n     * Converts segmentations into RTSS for download.\n     * This sample function retrieves all segentations and passes to\n     * cornerstone tool adapter to convert to DICOM RTSS format. It then\n     * converts dataset to downloadable blob.\n     *\n     */\n    downloadRTSS: ({ segmentationId }) => {\n      const segmentations = segmentationService.getSegmentation(segmentationId);\n      const vtkUtils = {\n        vtkImageMarchingSquares,\n        vtkDataArray,\n        vtkImageData,\n      };\n\n      const RTSS = generateRTSSFromSegmentations(\n        segmentations,\n        classes.MetadataProvider,\n        DicomMetadataStore,\n        cache,\n        cornerstoneToolsEnums,\n        vtkUtils\n      );\n\n      try {\n        const reportBlob = datasetToBlob(RTSS);\n\n        //Create a URL for the binary.\n        const objectUrl = URL.createObjectURL(reportBlob);\n        window.location.assign(objectUrl);\n      } catch (e) {\n        console.warn(e);\n      }\n    },\n  };\n\n  const definitions = {\n    getUpdatedViewportsForSegmentation: {\n      commandFn: actions.getUpdatedViewportsForSegmentation,\n    },\n    loadSegmentationDisplaySetsForViewport: {\n      commandFn: actions.loadSegmentationDisplaySetsForViewport,\n    },\n    loadSegmentationsForViewport: {\n      commandFn: actions.loadSegmentationsForViewport,\n    },\n    createEmptySegmentationForViewport: {\n      commandFn: actions.createEmptySegmentationForViewport,\n    },\n    generateSegmentation: {\n      commandFn: actions.generateSegmentation,\n    },\n    downloadSegmentation: {\n      commandFn: actions.downloadSegmentation,\n    },\n    storeSegmentation: {\n      commandFn: actions.storeSegmentation,\n    },\n    downloadRTSS: {\n      commandFn: actions.downloadRTSS,\n    },\n  };\n\n  return {\n    actions,\n    definitions,\n  };\n};\n\nexport default commandsModule;\n","import { id } from './id';\nimport React from 'react';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport getPanelModule from './getPanelModule';\nimport getCommandsModule from './commandsModule';\nimport preRegistration from './init';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport');\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n  preRegistration,\n\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule,\n  getCommandsModule,\n\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [{ name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport }];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\n","import { addTool, BrushTool } from '@cornerstonejs/tools';\n\nexport default function init({ configuration = {} }): void {\n  addTool(BrushTool);\n}\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","console","error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","Error","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","_ref","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","_ref2","utilityModule","getModuleEntry","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","_load","_ref3","name","getDisplaySetsFromSeries","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","toolGroupId","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","noCloseButton","onClose","actions","text","type","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","rgbaColor","ChromePicker","color","rgb","presetColors","width","PanelSegmentation","commandsManager","configuration","viewportGridService","t","useTranslation","selectedSegmentationId","setSelectedSegmentationId","useState","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","segmentations","setSegmentations","getSegmentations","useEffect","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","getToolGroupIds","segmentationId","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","useCallback","setConfiguration","SegmentationGroupTable","disableEditing","activeSegmentationId","onSegmentationAdd","runCommand","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationDownload","onSegmentationDownloadRTSS","storeSegmentation","datasources","getActiveDataSource","displaySetInstanceUIDs","createReportAsync","getReport","dataSource","reportType","setDisplaySetsForViewport","viewportId","getActiveViewportId","onSegmentationEdit","segmentation","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","segmentIndex","setActiveSegment","jumpToSegmentCenter","onSegmentEdit","segment","setSegmentLabel","onSegmentAdd","addSegment","onSegmentColorClick","opacity","r","g","b","a","callColorPickerDialog","newRgbaColor","setSegmentRGBAColor","onSegmentDelete","removeSegment","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentLock","toggleSegmentLocked","onToggleSegmentationVisibility","toggleSegmentationVisibility","showDeleteSegment","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","propTypes","PropTypes","isRequired","segmentationUtils","utilities","TOOL_TYPES","CIRCULAR_BRUSH","SPHERE_BRUSH","CIRCULAR_ERASER","SPHERE_ERASER","CIRCLE_SHAPE","RECTANGLE_SHAPE","SPHERE_SHAPE","THRESHOLD_CIRCULAR_BRUSH","THRESHOLD_SPHERE_BRUSH","ACTIONS","SET_TOOL_CONFIG","SET_ACTIVE_TOOL","initialState","Brush","brushSize","mode","Eraser","Shapes","ThresholdBrush","thresholdRange","activeTool","toolboxReducer","state","tool","config","payload","_getToolNamesFromCategory","category","toolNames","toolbarService","toolGroupService","viewportGrid","useViewportGrid","activeViewportId","toolsEnabled","setToolsEnabled","dispatch","useReducer","updateActiveTool","size","undefined","viewport","get","getActiveToolForViewport","setToolActive","toolName","recordInteraction","interactionType","commands","commandName","commandOptions","events","unsubscriptions","activeSegmentation","find","seg","isActive","segmentCount","TOOL_BAR_STATE_MODIFIED","values","includes","updateBrushSize","setBrushSizeForToolGroup","onBrushSizeChange","valueAsStringOrNumber","toolCategory","Number","handleRangeChange","newRange","getToolGroup","setToolConfiguration","strategySpecificConfiguration","THRESHOLD_INSIDE_CIRCLE","threshold","AdvancedToolbox","items","icon","disabled","active","onClick","options","min","max","step","children","InputDoubleRange","minValue","maxValue","showLabel","allowNumberEdit","showAdjustmentArrows","customizationService","iconName","iconLabel","component","appConfig","useAppConfig","disableEditingForMode","SegmentationToolbox","updateViewportsForSegmentationRendering","loadFn","cornerstoneViewportService","getTargetViewport","targetViewportId","updatedViewports","getUpdatedViewportsForSegmentation","createSegmentationForVolume","hydrateSegmentation","volumeExists","Array","from","_volumeCache","some","volumeId","needsRerendering","csViewport","getCornerstoneViewport","prevCamera","getCamera","createNewSegmentationWhenVolumeMounts","isTheActiveViewportVolumeMounted","volumeActors","ac","uid","volumeViewport","setCamera","element","removeEventListener","VOLUME_VIEWPORT_NEW_VOLUME","setDisplaySetsForViewports","getState","hangingProtocolService","referenceDisplaySetInstanceUID","segmentationFrameOfReferenceUID","getDisplaySetByUID","FrameOfReferenceUID","getViewportsRequireUpdate","v","shouldRenderSegmentation","datasetToBlob","generateLabelMaps2DFrom3D","generateSegmentation","RTSS","generateRTSSFromSegmentations","adaptersRT","downloadDICOMData","helpers","uiNotificationService","createEmptySegmentationForViewport","currentSegmentations","createSegmentationForDisplaySet","addSegmentationRepresentationToToolGroup","show","message","loadSegmentationsForViewport","scalarData","getLabelmapVolume","set","isLocked","visibility","activeSegmentIndex","centroidsIJK","setCentroids","loadSegmentationDisplaySetsForViewport","_ref4","serviceFunction","boundFn","bind","_ref5","cornerstoneToolsSegmentation","representationData","LABELMAP","segmentationVolume","getCornerstoneImages","labelmapObj","metadata","segmentationInOHIF","segmentsOnLabelmap","rgb2DICOMLAB","slice","segmentMetadata","SegmentNumber","toString","SegmentLabel","SegmentAlgorithmType","SegmentAlgorithmName","SegmentedPropertyCategoryCodeSequence","CodeValue","CodingSchemeDesignator","CodeMeaning","SegmentedPropertyTypeCodeSequence","downloadSegmentation","_ref6","generatedSegmentation","dataset","_ref7","promptResult","createReportDialogPrompt","generatedData","naturalizedReport","store","dicom","getConfig","DicomMetadataStore","addInstances","downloadRTSS","_ref8","vtkUtils","vtkImageMarchingSquares","vtkDataArray","vtkImageData","classes","MetadataProvider","cornerstoneToolsEnums","reportBlob","objectUrl","URL","createObjectURL","window","location","e","warn","definitions","commandFn","Component","OHIFCornerstoneSEGViewport","props","fallback","preRegistration","addTool","BrushTool","getPanelModule","getCommandsModule","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule"],"sourceRoot":""}